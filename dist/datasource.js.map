{"version":3,"sources":["../src/datasource.js"],"names":["_","ConditionalSwitchDatasource","instanceSettings","$q","datasourceSrv","templateSrv","options","sets","groupBy","targets","promises","map","dsName","datasource","when","data","get","then","replace","ds","type","scopedVars","opt","angular","copy","query","all","flatten","results"],"mappings":";;;;;;;;;;;;;;;AAAOA,O;;;;;;;;;;;;;;;;;;;;;6CAEMC,2B;AACX,6CAAYC,gBAAZ,EAA8BC,EAA9B,EAAkCC,aAAlC,EAAiDC,WAAjD,EAA8D;AAAA;;AAC5D,eAAKH,gBAAL,GAAwBA,gBAAxB;AACA,eAAKC,EAAL,GAAUA,EAAV;AACA,eAAKC,aAAL,GAAqBA,aAArB;AACA,eAAKC,WAAL,GAAmBA,WAAnB;AACD;;;;gCAEKC,O,EAAS;AAAA;;AACb,gBAAIC,OAAOP,EAAEQ,OAAF,CAAUF,QAAQG,OAAlB,EAA2B,YAA3B,CAAX;AACA,gBAAIC,WAAWV,EAAEW,GAAF,CAAMJ,IAAN,EAAY,mBAAW;AACpC,kBAAIK,SAASH,QAAQ,CAAR,EAAWI,UAAxB;AACA,kBAAID,WAAW,oBAAf,EAAqC;AACnC,uBAAO,MAAKT,EAAL,CAAQW,IAAR,CAAa,EAAEC,MAAM,EAAR,EAAb,CAAP;AACD;;AAED,qBAAO,MAAKX,aAAL,CAAmBY,GAAnB,CAAuBJ,MAAvB,EAA+BK,IAA/B,CAAoC,cAAM;AAC/C,oBAAIL,SAAS,MAAKP,WAAL,CAAiBa,OAAjB,CAAyB,SAAQC,GAAGC,IAApC,EAA0Cd,QAAQe,UAAlD,CAAb;AACA,uBAAO,MAAKjB,aAAL,CAAmBY,GAAnB,CAAuBJ,MAAvB,EAA+BK,IAA/B,CAAoC,cAAM;AAC/C,sBAAIK,MAAMC,QAAQC,IAAR,CAAalB,OAAb,CAAV;AACA,yBAAOa,GAAGM,KAAH,CAASH,GAAT,CAAP;AACD,iBAHM,CAAP;AAID,eANM,CAAP;AAOD,aAbc,CAAf;;AAeA,mBAAO,KAAKnB,EAAL,CAAQuB,GAAR,CAAYhB,QAAZ,EAAsBO,IAAtB,CAA2B,mBAAW;AAC3C,qBAAO,EAAEF,MAAMf,EAAE2B,OAAF,CAAU3B,EAAEW,GAAF,CAAMiB,OAAN,EAAe,MAAf,CAAV,CAAR,EAAP;AACD,aAFM,CAAP;AAGD","file":"datasource.js","sourcesContent":["import _ from 'lodash';\n\nexport class ConditionalSwitchDatasource {\n  constructor(instanceSettings, $q, datasourceSrv, templateSrv) {\n    this.instanceSettings = instanceSettings;\n    this.$q = $q;\n    this.datasourceSrv = datasourceSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  query(options) {\n    var sets = _.groupBy(options.targets, 'datasource');\n    var promises = _.map(sets, targets => {\n      let dsName = targets[0].datasource;\n      if (dsName === 'Conditional Switch') {\n        return this.$q.when({ data: [] });\n      }\n\n      return this.datasourceSrv.get(dsName).then(ds => {\n        let dsName = this.templateSrv.replace('$ds_'+ ds.type, options.scopedVars);\n        return this.datasourceSrv.get(dsName).then(ds => {\n          let opt = angular.copy(options);\n          return ds.query(opt);\n        });\n      });\n    });\n\n    return this.$q.all(promises).then(results => {\n      return { data: _.flatten(_.map(results, 'data')) };\n    });\n  }\n}\n"]}